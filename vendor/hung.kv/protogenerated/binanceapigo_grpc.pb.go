// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: binanceapigo/binanceapigo.proto

package protogenerated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulatorClient is the client API for Simulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulatorClient interface {
	Home(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type simulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulatorClient(cc grpc.ClientConnInterface) SimulatorClient {
	return &simulatorClient{cc}
}

func (c *simulatorClient) Home(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/protogenerated.Simulator/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/protogenerated.Simulator/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServer is the server API for Simulator service.
// All implementations must embed UnimplementedSimulatorServer
// for forward compatibility
type SimulatorServer interface {
	Home(context.Context, *Empty) (*HelloReply, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedSimulatorServer()
}

// UnimplementedSimulatorServer must be embedded to have forward compatible implementations.
type UnimplementedSimulatorServer struct {
}

func (UnimplementedSimulatorServer) Home(context.Context, *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedSimulatorServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSimulatorServer) mustEmbedUnimplementedSimulatorServer() {}

// UnsafeSimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulatorServer will
// result in compilation errors.
type UnsafeSimulatorServer interface {
	mustEmbedUnimplementedSimulatorServer()
}

func RegisterSimulatorServer(s grpc.ServiceRegistrar, srv SimulatorServer) {
	s.RegisterService(&Simulator_ServiceDesc, srv)
}

func _Simulator_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protogenerated.Simulator/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).Home(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulator_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protogenerated.Simulator/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Simulator_ServiceDesc is the grpc.ServiceDesc for Simulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protogenerated.Simulator",
	HandlerType: (*SimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Home",
			Handler:    _Simulator_Home_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Simulator_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binanceapigo/binanceapigo.proto",
}
